{"ast":null,"code":"var _jsxFileName = \"/home/arkaanfast/Desktop/Twimbit-client/twim-blog/src/components/HomeComponent/HomeComponent.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { UserContext } from '../../App';\nimport PostCard from './PostCards';\nimport Pagination from '../PaginationComponent/PaginationComponent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet start = 0;\n\nconst Home = () => {\n  _s();\n\n  const {\n    state,\n    dispatch\n  } = useContext(UserContext);\n  const [postList, setPostList] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage] = useState(10);\n  const [totalPost, postCount] = useState(0);\n  useEffect(() => getPosts(), []);\n\n  const getPosts = async () => {\n    setLoading(true);\n    const res = await fetch(`https://twimbit-api.herokuapp.com/api/post/allPosts?start=${start}`, {\n      headers: {\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\")\n      }\n    });\n    const data = await res.json();\n\n    if (res.status === 201) {\n      setPostList(data.posts);\n      setLoading(false);\n      postCount(data.totalPosts);\n    } else {\n      setPostList([]);\n    }\n  };\n\n  const paginate = async pageNumber => {\n    if (currentPage != pageNumber) {\n      start += 10;\n      setLoading(true);\n      console.log(localStorage.getItem(\"jwt\"));\n      const res = await fetch(`https://twimbit-api.herokuapp.com/api/post/allPosts?start=${start}`, {\n        headers: {\n          Authorization: \"Bearer \" + localStorage.getItem(\"jwt\")\n        }\n      });\n      const data = await res.json();\n\n      if (res.status === 201) {\n        setPostList(postList.concat(data.posts));\n        setLoading(false);\n        setCurrentPage(pageNumber);\n      } else {\n        setPostList([]);\n      }\n    }\n  };\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loader\",\n      style: {\n        position: \"absolute\",\n        bottom: \"50%\",\n        right: \" 50%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"preloader-wrapper small active\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner-layer spinner-green-only\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"circle-clipper left\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"circle\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"gap-patch\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"circle\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"circle-clipper right\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"circle\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this);\n  }\n\n  const indexofLastPost = currentPage * postsPerPage;\n  const indexofFirstPost = indexofLastPost - postsPerPage;\n  const currentPosts = postList.slice(indexofFirstPost, indexofLastPost);\n  const content = currentPosts.map(post => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col s4 offset-l4\",\n        children: /*#__PURE__*/_jsxDEV(PostCard, {\n          postItem: post\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this)\n    }, post._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this);\n  }); // const rows = [...Array(Math.ceil(postList.length / 5))];\n  // const postRows = rows.map((row, idx) => postList.slice(idx * 4, idx * 4 + 4));\n  // const content = postRows.map((row, idx) => (\n  //     <div className=\"row\" key={idx}>\n  //         {row.map((post) => {\n  //             return (\n  //                 <div className=\"col s4 offset-l4\" >\n  //                     <PostCard postItem={post} />\n  //                 </div>\n  //             );\n  //         })}\n  //     </div>)\n  // );\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      style: {\n        textAlign: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"These are the posts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this), content, /*#__PURE__*/_jsxDEV(Pagination, {\n      postsPerPage: postsPerPage,\n      totalPosts: totalPost,\n      paginate: paginate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Home, \"djFrzOe7t/0+17w07sjURXqVATI=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/home/arkaanfast/Desktop/Twimbit-client/twim-blog/src/components/HomeComponent/HomeComponent.jsx"],"names":["React","useState","useEffect","useContext","UserContext","PostCard","Pagination","start","Home","state","dispatch","postList","setPostList","loading","setLoading","currentPage","setCurrentPage","postsPerPage","totalPost","postCount","getPosts","res","fetch","headers","Authorization","localStorage","getItem","data","json","status","posts","totalPosts","paginate","pageNumber","console","log","concat","position","bottom","right","indexofLastPost","indexofFirstPost","currentPosts","slice","content","map","post","_id","textAlign"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport { UserContext } from '../../App';\nimport PostCard from './PostCards';\nimport Pagination from '../PaginationComponent/PaginationComponent';\n\nlet start = 0;\n\nconst Home = () => {\n    const { state, dispatch } = useContext(UserContext);\n    const [postList, setPostList] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [postsPerPage] = useState(10);\n    const [totalPost, postCount] = useState(0);\n    useEffect(() => getPosts(), []);\n\n    const getPosts = async () => {\n        setLoading(true);\n        const res = await fetch(`https://twimbit-api.herokuapp.com/api/post/allPosts?start=${start}`, {\n            headers: {\n                Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\n            },\n        });\n\n        const data = await res.json();\n        if (res.status === 201) {\n            setPostList(data.posts);\n            setLoading(false);\n            postCount(data.totalPosts);\n        } else {\n            setPostList([]);\n        }\n    }\n\n    const paginate = async (pageNumber) => {\n        if (currentPage != pageNumber) {\n\n            start += 10;\n            setLoading(true);\n            console.log(localStorage.getItem(\"jwt\"));\n            const res = await fetch(`https://twimbit-api.herokuapp.com/api/post/allPosts?start=${start}`, {\n                headers: {\n                    Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\n                },\n            });\n\n            const data = await res.json();\n            if (res.status === 201) {\n                setPostList(postList.concat(data.posts));\n                setLoading(false);\n                setCurrentPage(pageNumber);\n            } else {\n                setPostList([]);\n            }\n\n        }\n\n    }\n\n\n\n    if (loading) {\n        return (\n            <div className=\"loader\" style={{\n                position: \"absolute\",\n                bottom: \"50%\",\n                right: \" 50%\"\n            }}>\n                <div className=\"preloader-wrapper small active\">\n                    <div className=\"spinner-layer spinner-green-only\">\n                        <div className=\"circle-clipper left\">\n                            <div className=\"circle\"></div>\n                        </div>\n                        <div className=\"gap-patch\">\n                            <div className=\"circle\"></div>\n                        </div>\n                        <div className=\"circle-clipper right\">\n                            <div className=\"circle\"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    const indexofLastPost = currentPage * postsPerPage;\n    const indexofFirstPost = indexofLastPost - postsPerPage;\n    const currentPosts = postList.slice(indexofFirstPost, indexofLastPost);\n\n    const content = currentPosts.map((post) => {\n        return (\n            <div className=\"row\" key={post._id}>\n                <div className=\"col s4 offset-l4\">\n                    <PostCard postItem={post} />\n                </div>\n            </div>\n        )\n    })\n    // const rows = [...Array(Math.ceil(postList.length / 5))];\n    // const postRows = rows.map((row, idx) => postList.slice(idx * 4, idx * 4 + 4));\n    // const content = postRows.map((row, idx) => (\n    //     <div className=\"row\" key={idx}>\n    //         {row.map((post) => {\n    //             return (\n    //                 <div className=\"col s4 offset-l4\" >\n    //                     <PostCard postItem={post} />\n    //                 </div>\n    //             );\n    //         })}\n    //     </div>)\n    // );\n\n\n\n    return (\n        <div className=\"container-fluid\">\n\n            <div className=\"row\" style={{ textAlign: 'center' }}>\n                <h1>These are the posts</h1>\n            </div>\n            {content}\n            <Pagination postsPerPage={postsPerPage} totalPosts={totalPost} paginate={paginate} />\n        </div >\n\n\n    );\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}