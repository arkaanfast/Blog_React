{"ast":null,"code":"var _jsxFileName = \"/home/arkaanfast/Desktop/Twimbit-client/twim-blog/src/components/HomeComponent/HomeComponent.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { UserContext } from '../../App';\nimport PostCard from './PostCards';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet start = 0;\n\nconst Home = () => {\n  _s();\n\n  const {\n    state,\n    dispatch\n  } = useContext(UserContext);\n  const [postList, setPostList] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage] = useState(10);\n  useEffect(() => getPosts(), []);\n\n  const getPosts = async () => {\n    setLoading(true);\n    console.log(localStorage.getItem(\"jwt\"));\n    const res = await fetch(`https://twimbit-api.herokuapp.com/api/post/allPosts?start=${start}`, {\n      headers: {\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\")\n      }\n    });\n    const data = await res.json();\n\n    if (res.status === 201) {\n      setPostList(data.posts);\n      setLoading(false);\n    } else {\n      setPostList([]);\n    }\n  };\n\n  const paginate = async pageNumber => {\n    start += 10;\n    setLoading(true);\n    console.log(localStorage.getItem(\"jwt\"));\n    const res = await fetch(`https://twimbit-api.herokuapp.com/api/post/allPosts?start=${start}`, {\n      headers: {\n        Authorization: \"Bearer \" + localStorage.getItem(\"jwt\")\n      }\n    });\n    const data = await res.json();\n\n    if (res.status === 200) {\n      setPostList(postList.concat(data.posts));\n      setLoading(false);\n      setCurrentPage(pageNumber);\n    } else {\n      setPostList([]);\n    }\n  };\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loader\",\n      style: {\n        position: \"absolute\",\n        bottom: \"50%\",\n        right: \" 50%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"preloader-wrapper small active\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner-layer spinner-green-only\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"circle-clipper left\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"circle\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"gap-patch\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"circle\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"circle-clipper right\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"circle\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this);\n  }\n\n  const indexofLastPost = currentPage * postsPerPage;\n  const indexofFirstPost = indexofLastPost - postsPerPage;\n  const currentPosts = postList.slice(indexofFirstPost, indexofLastPost);\n  const content = currentPosts.map(post => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col s4 offset-l4\",\n        children: /*#__PURE__*/_jsxDEV(PostCard, {\n          postItem: post\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this);\n  }); // const rows = [...Array(Math.ceil(postList.length / 5))];\n  // const postRows = rows.map((row, idx) => postList.slice(idx * 4, idx * 4 + 4));\n  // const content = postRows.map((row, idx) => (\n  //     <div className=\"row\" key={idx}>\n  //         {row.map((post) => {\n  //             return (\n  //                 <div className=\"col s4 offset-l4\" >\n  //                     <PostCard postItem={post} />\n  //                 </div>\n  //             );\n  //         })}\n  //     </div>)\n  // );\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      style: {\n        textAlign: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"These are the posts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), content]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Home, \"7b7zXAPa5y/p99q29tqI7mvNNNk=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/home/arkaanfast/Desktop/Twimbit-client/twim-blog/src/components/HomeComponent/HomeComponent.jsx"],"names":["React","useState","useEffect","useContext","UserContext","PostCard","start","Home","state","dispatch","postList","setPostList","loading","setLoading","currentPage","setCurrentPage","postsPerPage","getPosts","console","log","localStorage","getItem","res","fetch","headers","Authorization","data","json","status","posts","paginate","pageNumber","concat","position","bottom","right","indexofLastPost","indexofFirstPost","currentPosts","slice","content","map","post","textAlign"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport { UserContext } from '../../App';\nimport PostCard from './PostCards';\n\nlet start = 0;\n\nconst Home = () => {\n    const { state, dispatch } = useContext(UserContext);\n    const [postList, setPostList] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [postsPerPage] = useState(10);\n    useEffect(() => getPosts(), []);\n\n    const getPosts = async () => {\n        setLoading(true);\n        console.log(localStorage.getItem(\"jwt\"));\n        const res = await fetch(`https://twimbit-api.herokuapp.com/api/post/allPosts?start=${start}`, {\n            headers: {\n                Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\n            },\n        });\n\n        const data = await res.json();\n        if (res.status === 201) {\n            setPostList(data.posts);\n            setLoading(false);\n        } else {\n            setPostList([]);\n        }\n    }\n\n    const paginate = async (pageNumber) => {\n        start += 10;\n        setLoading(true);\n        console.log(localStorage.getItem(\"jwt\"));\n        const res = await fetch(`https://twimbit-api.herokuapp.com/api/post/allPosts?start=${start}`, {\n            headers: {\n                Authorization: \"Bearer \" + localStorage.getItem(\"jwt\"),\n            },\n        });\n\n        const data = await res.json();\n        if (res.status === 200) {\n            setPostList(postList.concat(data.posts));\n            setLoading(false);\n            setCurrentPage(pageNumber);\n        } else {\n            setPostList([]);\n        }\n    }\n\n\n\n    if (loading) {\n        return (\n            <div className=\"loader\" style={{\n                position: \"absolute\",\n                bottom: \"50%\",\n                right: \" 50%\"\n            }}>\n                <div className=\"preloader-wrapper small active\">\n                    <div className=\"spinner-layer spinner-green-only\">\n                        <div className=\"circle-clipper left\">\n                            <div className=\"circle\"></div>\n                        </div>\n                        <div className=\"gap-patch\">\n                            <div className=\"circle\"></div>\n                        </div>\n                        <div className=\"circle-clipper right\">\n                            <div className=\"circle\"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    const indexofLastPost = currentPage * postsPerPage;\n    const indexofFirstPost = indexofLastPost - postsPerPage;\n    const currentPosts = postList.slice(indexofFirstPost, indexofLastPost);\n\n    const content = currentPosts.map((post) => {\n        return (\n            <div className=\"row\">\n                <div className=\"col s4 offset-l4\">\n                    <PostCard postItem={post} />\n                </div>\n            </div>\n        )\n    })\n    // const rows = [...Array(Math.ceil(postList.length / 5))];\n    // const postRows = rows.map((row, idx) => postList.slice(idx * 4, idx * 4 + 4));\n    // const content = postRows.map((row, idx) => (\n    //     <div className=\"row\" key={idx}>\n    //         {row.map((post) => {\n    //             return (\n    //                 <div className=\"col s4 offset-l4\" >\n    //                     <PostCard postItem={post} />\n    //                 </div>\n    //             );\n    //         })}\n    //     </div>)\n    // );\n\n\n\n    return (\n        <div className=\"container-fluid\">\n\n            <div className=\"row\" style={{ textAlign: 'center' }}>\n                <h1>These are the posts</h1>\n            </div>\n            {content}\n\n        </div >\n\n    );\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}